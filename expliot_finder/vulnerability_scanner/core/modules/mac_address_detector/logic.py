"""Detect MAC address and vendor name of MAC used by the target.

This module will try to detect:
    - MAC address used by target
    - vendor name of MAC used by target
Information detected by this module will be saved and returned in the following
form:

    .. code-block:: python

        # Return MAC address used by target
        'mac_address': 'D8-0D-17-XX-XX-XX',
        # Return vendor name of MAC address used by target
        'mac_vendor_name': 'TP-LINK TECHNOLOGIES CO.,LTD.',
"""
from __future__ import annotations

__all__ = ("MACAddressDetector",)

import asyncio
import re
from asyncio.subprocess import Process as async_Process
from typing import List

from .const import MAC_VENDORS
from .state import DetectedMACAddress


class MACAddressDetector:
    """Asynchronous detector of MAC address and vendor name of MAC used by
    target.

    This class stores the methods that will try to detect the MAC address of
    chosen target during the scan. If MAC address will be detected methods in
    this class will try to obtain vendor name by using detected MAC address. If
    everything is successful this class will save detected MAC address and
    vendor name into 'captured_sensitive_info' variable.

    Attributes:
        captured_sensitive_info:
            Global dataclass that stores detected sensitive information about
            the selected target to scan. This dataclass can be easily
            transformed to the dictionary.
        detected_mac_address: Dataclass which will temporarily store detected
            MAC address and vendor name of MAC used by the target. Those
            detected information will be stored until will not be forwarded
            into 'captured_sensitive_info'.

    .. automethod:: __send_arp_request
    .. automethod:: __extract_mac_address
    .. automethod:: __validate_mac_address
    .. automethod:: __determine_vendor_name
    .. automethod:: __save_detected_mac_address_and_vendor_name
    """

    __slots__ = "detected_mac_address", "captured_sensitive_info",

    def __init__(self, captured_sensitive_info: CapturedSensitiveInfo) -> None:
        self.detected_mac_address = DetectedMACAddress()
        self.captured_sensitive_info = captured_sensitive_info

    async def capture_mac_addr_and_vendor_name(self) -> None:
        """The handle that's calls methods in this class to detect MAC address
        and vendor name of MAC used by the target.

        Detection of the MAC address will be done by analyzing the output of
        'ARP' command after sending the ARP request to the target. Detection of
        vendor name will begin as soon as the MAC address used by the target is
        detected.
        """
        await self.__extract_mac_address()
        self.__determine_vendor_name()
        self.__save_detected_mac_address_and_vendor_name()

    async def __send_arp_request(self) -> str:
        """Send 'ARP' request to chosen target.

        The 'ARP' request will be sent asynchronously so this method will not
        block other working scanners.

        Returns:
            Output from 'ARP' command.
        """
        arp_request: async_Process = await asyncio.create_subprocess_shell(
            f"arp -a {self.captured_sensitive_info.ip}",
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE,
        )

        arp_output = await arp_request.stdout.read()

        return arp_output.decode("ascii").strip()

    async def __extract_mac_address(self) -> None:
        """Extract MAC address of scanned target from 'ARP' command output.

        If the chosen target doesn't block ARP requests it is possible that
        this method will extract MAC address of chosen target from 'ARP'
        output. If the MAC address is successfully extracted it will be
        given for validation to validate_mac_address() function.
        """
        arp_output: list[str] = await asyncio.gather(self.__send_arp_request())
        try:
            temp_ip, extracted_mac, *_ = (
                arp_output[0].split("Type\r\n"))[1].split()
            if temp_ip == self.captured_sensitive_info.ip:
                self.__validate_mac_address(extracted_mac)
        except IndexError:
            pass

    def __validate_mac_address(self, extracted_mac: str) -> None:
        """Validate the detected MAC address of selected target.

        The validation is performed to verify that the detected MAC address is
        in the correct format if so then detected MAC address will be saved.

        Args:
            extracted_mac:
                Extracted MAC address from ARP output command which has been
                detected in chosen target.
        """
        re_mac_validator = ("^([0-9A-Fa-f]{2}[:-])" + "{5}([0-9A-Fa-f]{2})|" +
                            "([0-9a-fA-F]{4}\\." + "[0-9a-fA-F]{4}\\." +
                            "[0-9a-fA-F]{4})$")
        mac_validator = re.compile(re_mac_validator)

        if re.search(mac_validator, extracted_mac):
            self.detected_mac_address.mac_addr = extracted_mac.replace(
                "-", ":").upper()

    def __determine_vendor_name(self) -> None:
        """Determine vendor name of detected MAC used by target.

        If the first of 24 bits of detected MAC address can be found as a
        dictionary key in const named: 'MAC_VENDORS', the vendor name will be
        saved.
        """
        if vendor_name := MAC_VENDORS.get(
                self.detected_mac_address.mac_addr[:8]):
            self.detected_mac_address.vendor_name = vendor_name

    def __save_detected_mac_address_and_vendor_name(self) -> None:
        """Save detected MAC address and vendor MAC name of selected target
        into global dataclass 'CapturedSensitiveInfo'.

        Those two saved information: 'MAC address' and 'Vendor name' will be
        showed in console immediately after saving.
        """
        self.captured_sensitive_info.mac_address = f"{self.detected_mac_address.mac_addr}"
        self.captured_sensitive_info.mac_vendor_name = f"{self.detected_mac_address.vendor_name})"
