"""Dataclasses where 'mac_address_detector' module will store the detected
information temporarily ('MAC address' and 'MAC vendor name') before being
saved into global dataclass named 'CapturedSensitiveInfo'.
"""

__all__ = ("DetectedMACAddress",)

from dataclasses import dataclass
from typing import Dict, Optional


@dataclass(kw_only=True, slots=True)
class DetectedMACAddress:
    """Store detected MAC address and detected vendor name of the chosen target

    Attributes:
        mac_addr:
            The detected MAC address of the chosen target.
        vendor_name:
            The detected vendor name of MAC address of the chosen target.
    """

    mac_addr: Optional[str] = "Unknown"
    vendor_name: Optional[str] = "Unknown"

    def __iter__(self) -> Dict[str, str]:
        """Allow transforming dataclass into dictionary."""
        if self.mac_addr:
            yield "mac_address", self.mac_addr
