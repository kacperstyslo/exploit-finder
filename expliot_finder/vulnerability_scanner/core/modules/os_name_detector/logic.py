"""Detect OS used by target.

This module will try to detect:
    - OS used by target
Information detected by this module will be saved and returned in the following
form:

    .. code-block:: python

        # Return operating system name used by target
        'os_name': 'Linux',
"""
from __future__ import annotations

__all__ = ("OSNameDetector",)

import asyncio
import platform
import re

from .const import OS_NAMES
from .state import DetectedOSName
from .exceptions import InactiveTargetError


class OSNameDetector:
    """Asynchronous detector of OS name used by chosen target.

    To detect OS name used by target, methods in this class analyze TTL value
    from ICMP echo reply.

    Attributes:
        ttl:
            Extracted TTL from 'icmp_echo_replay' stored as string.
        ping_command:
            Ping command, set appropriately depending on the operating system.
        icmp_echo_replay:
            ICMP echo replay generated after ping command has benn executed.
            This ICMP echo replay is stored in decoded string.
        captured_sensitive_info:
            Global dataclass that stores detected sensitive information about
            the selected target to scan. This dataclass can be easily
            transformed to the dictionary.
        detected_os_name:
            Dataclass which will temporarily store detected OS name used by
            target. Those detected information will be stored until will not be
            forwarded into 'captured_sensitive_info'.

    .. automethod:: __ping_target
    .. automethod:: __extract_ttl
    .. automethod:: __determine_os_name
    .. automethod:: __save_detected_os_name
    """

    __slots__ = (
        "ttl",
        "icmp_echo_replay",
        "_ping_command",
        "captured_sensitive_info",
        "detected_os_name",
    )

    def __init__(self, captured_sensitive_info: CapturedSensitiveInfo) -> None:
        self.captured_sensitive_info = captured_sensitive_info
        self.ttl: str = ""
        self.icmp_echo_replay: str = ""
        self.ping_command = platform.system()
        self.detected_os_name: DetectedOSName = DetectedOSName()

    async def capture_os_name(self) -> None:
        """The handle that's calls methods in this class to detect OS used by
        the target.

        Detection of the operating system used by the target will be done by
        analyzing the ICMP echo repeats (precisely analyzing the returned TTL).
        """
        await self.__ping_target()
        self.__extract_ttl()
        self.__determine_os_name()
        self.__save_detected_os_name()

    @property
    def ping_command(self) -> str:
        """Get ping_command.

        Returns:
            '_ping_command' that will be used to execute ping command and
            receive ICMP echo replay as an output of command.
        """
        return self._ping_command

    @ping_command.setter
    def ping_command(self, executor_system_name: str) -> None:
        """Set the ping command appropriately depending on the operating
        system.

        There will be differences, for example, between Widows and Linux in
        syntax of a ping command, so it is important to adjust ping command
        parameters to attacker's operating system.

        Args:
            executor_system_name:
                The name of the attacker's operating system.
        """
        if executor_system_name == "Windows":
            self._ping_command: str = f"ping -n 1 -w 100 {self.captured_sensitive_info.ip}"
        elif executor_system_name == "Linux":
            self._ping_command: str = f"ping -c 1 {self.captured_sensitive_info.ip}"

    async def __ping_target(self) -> None:
        """Check if the target selected to scanning is reachable.

        Checking whether the target to be scanned is reachable on the network
        will be done using the ICMP protocol. When the ping is successful, the
        'ICMP echo repeat' will be saved. From 'ICMP echo recovery', methods in
        this class will attempt to extract the OS name of the target to which
        the ICMP request was sent.

        Raises:
            InactiveTargetError: An error occurred when selected target to
                scanning is not reachable.
        """

        proc = await asyncio.create_subprocess_shell(
            self.ping_command,
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE,
        )

        ping_output = await proc.stdout.read()

        if b"Request timed out." in ping_output:
            raise InactiveTargetError(self.captured_sensitive_info.ip)

        self.icmp_echo_replay: str = ping_output.decode("cp1250").strip()

    def __extract_ttl(self) -> None:
        """Extract TTL from ICMP echo replay.

        The TTL value is needed to determine the operating system used by
        target.
        """
        self.ttl: str = re.findall(r"\bttl=\b\d{1,3}\b",
                                   self.icmp_echo_replay,
                                   flags=re.IGNORECASE)[0].split("=")[-1]

    def __determine_os_name(self) -> None:
        """Determine OS name used by target.

        Determine the name of the operating system used by the target from the
        extracted TTL value. If the TTL value is unrecognizable, the target's
        OS will remain unknown.
        """
        if detected_os_name := OS_NAMES.get(self.ttl):
            self.detected_os_name.name = detected_os_name

    def __save_detected_os_name(self) -> None:
        """Save detected OS name used by target into global dataclass
        'CapturedSensitiveInfo'.
        """
        self.captured_sensitive_info.os_name = self.detected_os_name.name
